{"version":3,"sources":["util/resas_api.js","component/PrefectureBox.js","component/PrefecturePage.js","component/CityBox.js","component/CityList.js","component/CityPage.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","headers","getPrefectures","a","get","result","data","prefCode","cityCode","interceptors","request","use","config","token","localStorage","Auth","Authorization","defaults","common","process","PrefectureBox","props","state","added","color","count","pref","mode","loadData","change_display","bind","show_population","evt","preventDefault","this","onPrefectureSelect","prefName","currentCode","undefined","toString","startsWith","getPopulationOfPrefecture","then","catch","err","createAlert","className","style","backgroundColor","onClick","PropTypes","any","func","Component","PrefecturePage","prefecture_list","_isMounted","setState","map","CityBox","code","city","getPopulationOfCity","borderRadius","border","align","cityName","CityList","cities","getCities","CityPage","rendered","selected","indexOf","push","id","App","graphMode","keyList","総人口","年少人口","生産年齢人口","老年人口","display","changeMode","closeAlert","turnOff","totalPopulation","youngPopulation","workingAge","oldPopulation","values","key","i","length","year","value","j","k","label","newMode","alert","marginLeft","width","height","ResponsiveContainer","window","screen","LineChart","margin","top","right","left","bottom","XAxis","dataKey","YAxis","Tooltip","Line","type","stroke","gridTemplateColumns","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a33848e0.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create({\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\ninstance.interceptors.request.use(function (config) {\n  const token = localStorage.Auth;\n  config.headers.Authorization = token ? `Basic ${token}` : \"\";\n  return config;\n});\ninstance.defaults.headers.common = {\n  \"X-API-KEY\": process.env.REACT_APP_API_KEY,\n};\n\nasync function getPrefectures() {\n  var result = await instance.get(\n    \"https://opendata.resas-portal.go.jp/api/v1/prefectures\"\n  );\n  return result.data.result;\n}\n\nasync function getCities(prefCode) {\n  var result = await instance.get(\n    \"https://opendata.resas-portal.go.jp/api/v1/cities?prefCode=\" + prefCode\n  );\n  return result.data.result;\n}\n\nasync function getPopulationOfPrefecture(prefCode) {\n  var result = await instance.get(\n    \"https://opendata.resas-portal.go.jp/api/v1/population/composition/perYear?prefCode=\" +\n      prefCode\n  );\n  return result.data.result.data;\n}\n\nasync function getPopulationOfCity(prefCode, cityCode) {\n  var result = await instance.get(\n    \"https://opendata.resas-portal.go.jp/api/v1/population/composition/perYear?prefCode=\" +\n      prefCode +\n      \"&cityCode=\" +\n      cityCode\n  );\n  return result.data.result.data;\n}\n\nexport {\n  getPrefectures,\n  getCities,\n  getPopulationOfPrefecture,\n  getPopulationOfCity,\n};\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { getPopulationOfPrefecture } from \"../util/resas_api\";\n\nimport \"../css/box.css\";\n\nexport default class PrefectureBox extends Component {\n  static get propTypes() {\n    return {\n      pref: PropTypes.any, // Prefecture info\n      mode: PropTypes.any, // Mode 1 : pref population - 2 : city population\n      currentCode: PropTypes.any, // Current selected box code, change color if match\n      loadData: PropTypes.func, // Load population data to graph\n      createAlert: PropTypes.func, // Send alert to root if happen\n      onPrefectureSelect: PropTypes.func // Load cities list when this box is selected in mode 2\n    };\n  }\n  constructor(props) {\n    super(props);\n    this.state = {\n      added: false,\n      color: \"#A8A878\",\n      count: 0,\n    };\n    this.pref = this.props.pref;\n    this.mode = props.mode;\n    this.loadData = props.loadData;\n\n    this.change_display = this.change_display.bind(this);\n    this.show_population = this.show_population.bind(this);\n  }\n\n  change_display(evt) {\n    evt.preventDefault();\n    this.props.onPrefectureSelect(this.pref.prefCode, this.pref.prefName);\n  }\n\n  show_population(evt) {\n    evt.preventDefault();\n    var currentCode = this.props.currentCode;\n    if (currentCode == undefined || !currentCode.toString().startsWith(this.pref.prefCode + \"_\")) {\n\n      getPopulationOfPrefecture(this.pref.prefCode)\n        .then((result) => {\n          this.props.loadData(result, this.pref.prefCode + \"_\");\n        })\n        .catch((err) => this.props.createAlert(err));\n    } \n  }\n\n  render() {\n    var currentCode = this.props.currentCode;\n    var color =\n      currentCode != undefined &&\n      currentCode.toString().startsWith(this.pref.prefCode + \"_\")\n        ? \"#4924A1\"\n        : \"#A8A878\";\n    return (\n      <div className=\"prefBox\" style={{\n        backgroundColor: color\n        }}\n        onClick={\n            this.mode == 2\n              ? this.change_display\n              : this.show_population\n        }>\n        \n        {this.pref.prefName}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport PrefectureBox from \"./PrefectureBox\";\nimport { getPrefectures } from \"../util/resas_api\";\n\nimport \"../App.css\";\nexport default class PrefecturePage extends Component {\n  static get propTypes() {\n    return {\n      pref: PropTypes.any, // Pref info\n      currentCode: PropTypes.any, // Current selected box code, change color if match\n      loadData: PropTypes.func, // Load population data to graph\n      createAlert: PropTypes.func, // Send alert to root if happen\n    };\n  }\n  constructor(props) {\n    super(props);\n    this.state = {\n      prefecture_list: [],\n    };\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    getPrefectures()\n      .then((result) => {\n        this.setState({ prefecture_list: result });\n      })\n      .catch((err) => this.createAlert(err));\n  }\n\n  render() {\n    return (\n      <div className=\"prefecture_list\">\n        {this.state[\"prefecture_list\"].map((pref) => (\n          <PrefectureBox\n            key={pref.prefCode + \"_\" + this.props.currentCode}\n            pref={pref}\n            loadData={this.props.loadData}\n            createAlert={this.props.createAlert}\n            currentCode={this.props.currentCode}\n          ></PrefectureBox>\n        ))}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { getPopulationOfCity } from \"../util/resas_api\";\nimport PropTypes from \"prop-types\";\nimport \"../css/box.css\";\n\nexport default class CityBox extends Component {\n  static get propTypes() {\n    return {\n      city: PropTypes.any, // City need to display\n      currentCode: PropTypes.any, // Current selected box code, change color if match\n      loadData: PropTypes.func, // Load population data to graph\n      createAlert: PropTypes.func, // Send alert to root if happen\n    };\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      added: false,\n      color: \"#A8A878\",\n    };\n    this.show_population = this.show_population.bind(this);\n  }\n\n  show_population(evt) {\n    evt.preventDefault();\n    \n    var currentCode = this.props.currentCode;\n    var code = this.props.city.prefCode + \"_\" + this.props.city.cityCode;\n    if (currentCode == undefined || currentCode != code) {\n      getPopulationOfCity(this.props.city.prefCode, this.props.city.cityCode)\n        .then((result) => {\n          this.props.loadData(\n            result,\n            this.props.city.prefCode + \"_\" + this.props.city.cityCode\n          );\n        })\n        .catch((err) => this.props.createAlert(err));\n    } \n  }\n\n  render() {\n    var currentCode = this.props.currentCode;\n    var code = this.props.city.prefCode + \"_\" + this.props.city.cityCode;\n    var color =\n      currentCode != undefined && currentCode == code ? \"#4924A1\" : \"#A8A878\";\n    return (\n      <div\n        style={{\n          borderRadius: \"25px\",\n          border: \"5px solid #6D6D4E\",\n          backgroundColor: color,\n          color: \"white\",\n        }}\n      >\n        <p></p>\n        <div\n          onClick={this.show_population}\n          align=\"center\"\n          className=\"cityBox\"\n        >\n          {this.props.city.cityName}\n        </div>\n        <p></p>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { getCities } from \"../util/resas_api\";\n\nimport CityBox from \"./CityBox\";\n\nimport \"../css/cityPage.css\";\n\nexport default class CityList extends Component {\n  static get propTypes() {\n    return {\n      prefName: PropTypes.any, // Pref information\n      prefCode: PropTypes.any,\n      currentCode: PropTypes.any, // Current selected box code, change color if match\n      loadData: PropTypes.func, // Load population data to graph\n      createAlert: PropTypes.func, // Send alert to root if happen\n    };\n  }\n  constructor(props) {\n    super(props);\n    this.state = {\n      cities: [],\n    };\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    getCities(this.props.prefCode)\n      .then((result) => {\n        this.setState({ cities: result });\n      })\n      .catch((err) => this.props.createAlert(err));\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"header\">{this.props.prefName}</div>\n        <div className=\"cityList\">\n          {this.state.cities.map((city) => (\n            <CityBox\n              key={\n                city.prefCode +\n                \"_\" +\n                city.cityCode +\n                \"_\" +\n                this.props.currentCode\n              }\n              city={city}\n              loadData={this.props.loadData}\n              createAlert={this.props.createAlert}\n              currentCode={this.props.currentCode}\n            ></CityBox>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { getPrefectures } from \"../util/resas_api\";\n\nimport PrefectureBox from \"./PrefectureBox\";\nimport CityList from \"./CityList\";\nimport \"../css/cityPage.css\";\n\nexport default class CityPage extends Component {\n  static get propTypes() {\n    return {\n      currentCode: PropTypes.any, // Current selected box code, change color if match\n      loadData: PropTypes.func, // Load population data to graph\n      createAlert: PropTypes.func, // Send alert to root if happen\n    };\n  }\n  constructor(props) {\n    super(props);\n    this.state = {\n      prefecture_list: [],\n      rendered: [],\n      selected: undefined,\n      count: {},\n      prefName: undefined,\n      \n    };\n    this.onPrefectureSelect = this.onPrefectureSelect.bind(this);\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    getPrefectures()\n      .then((result) => {\n        this.setState({ prefecture_list: result });\n      })\n      .catch((err) => this.createAlert(err));\n  }\n\n  onPrefectureSelect(prefCode, prefName) {\n    // Load city data to city_page_right\n    var rendered = this.state.rendered;\n    var count = this.state.count;\n    if (rendered.indexOf(prefCode) == -1) {\n      rendered.push(prefCode);\n      count[prefCode] = 0;\n    }\n    this.setState({\n      rendered: rendered,\n      selected: prefCode,\n      prefName: prefName\n    });\n  }\n\n  render() {\n    \n    return (\n      <div id=\"city_page\">\n        <div id=\"city_page_left\">\n          {this.state[\"prefecture_list\"].map((pref) => (\n            <PrefectureBox\n              key={\"2_\" + pref.prefCode}\n              currentCode={this.props.currentCode}\n              pref={pref}\n              onPrefectureSelect={this.onPrefectureSelect}\n              mode={2}\n            ></PrefectureBox>\n          ))}\n        </div>\n        <div id=\"city_page_right\">\n          {this.state.selected == undefined?null:\n            <div\n              key={this.state.selected + \"_city\"}\n            >\n              <CityList\n                prefCode={this.state.selected}\n                loadData={this.props.loadData}\n                createAlert={this.props.createAlert}\n                currentCode={this.props.currentCode}\n                prefName={this.state.prefName}\n              ></CityList>\n            </div>\n          }\n        </div>\n      </div>\n    );\n  }\n}\n","import \"./App.css\";\n\nimport { LineChart, XAxis, YAxis, Line, Tooltip, ResponsiveContainer } from \"recharts\";\n\nimport React, { Component } from \"react\";\n\nimport PrefecturePage from \"./component/PrefecturePage\";\nimport CityPage from \"./component/CityPage\";\n\n//Graph mode : 1 - Prefectures, 2 - Cities\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      graphMode: 1, // Display mode\n      data: [], // Population data\n      keyList: [\"総人口\", \"年少人口\", \"生産年齢人口\", \"老年人口\"], // Display key\n      color: {\n        総人口: \"#6D5E9C\",\n        年少人口: \"#2C2C2C\",\n        生産年齢人口: \"#7D1F1A\",\n        老年人口: \"#4E8234\",\n      },\n      display: { // Display mode\n        総人口: \"\",\n        年少人口: \"\",\n        生産年齢人口: \"\",\n        老年人口: \"\",\n      },\n      currentCode: undefined,\n    };\n\n    this.loadData = this.loadData.bind(this)\n    this.changeMode = this.changeMode.bind(this)\n    this.createAlert = this.createAlert.bind(this)\n    this.closeAlert = this.closeAlert.bind(this)\n    this.turnOff = this.turnOff.bind(this)\n\n    this.totalPopulation = this.totalPopulation.bind(this)\n    this.youngPopulation = this.youngPopulation.bind(this)\n    this.workingAge = this.workingAge.bind(this)\n    this.oldPopulation = this.oldPopulation.bind(this)\n  }\n\n  loadData(values, key) {\n    var data = [];\n    for (let i = 0; i < values[0].data.length; i++)\n      data.push({ year: values[0].data[i].year })\n    for (let i = 0; i < values.length; i++) {\n      var value = values[i].data;\n      for (let j = 0; j < value.length; j++)\n        for (let k = 0; k < data.length; k++)\n          if (value[j].year == data[k].year)\n            data[k][values[i].label] = value[j].value\n    }\n    this.setState({ data: data, currentCode: key })\n  }\n\n  changeMode() {\n    var newMode = 1\n    if (this.state.graphMode == 1) {\n      newMode = 2\n    }\n    this.setState({\n      graphMode: newMode,\n      currentCode: undefined,\n    })\n  }\n\n  createAlert(alert) {\n    this.setState({ alert: alert })\n  }\n\n  closeAlert() {\n    this.setState({ alert: undefined })\n  }\n\n  turnOff(key) {\n    // Turn on and off line in graph\n    var display = this.state.display\n    if(display[key] == \"\") display[key]=\"none\"\n      else display[key]=\"\"\n    this.setState({display:display})\n  }\n\n  totalPopulation() {\n    this.turnOff(\"総人口\")\n  }\n\n  youngPopulation() {\n    this.turnOff(\"年少人口\")\n  }\n\n  workingAge() {\n    this.turnOff(\"生産年齢人口\")\n  }\n\n  oldPopulation() {\n    this.turnOff(\"老年人口\")\n  }\n\n  render() {\n    return (\n      <div style={{ marginLeft:\"1em\", width: \"90%\" ,height:\"100%\" }}>\n        \n        <ResponsiveContainer width = \"100%\" height = {window.screen.height/2} >        \n          <LineChart\n            data={this.state.data} \n            margin={{ top: 30, right: 30, left: 60, bottom: 0 }}\n          >\n            <XAxis dataKey=\"year\" />\n            <YAxis />\n            <Tooltip />\n            {this.state.keyList.map((key) => (\n              (this.state.display[key] == \"\")?\n              <Line\n                type=\"monotone\"\n                key={key}\n                dataKey={key}\n                stroke={this.state.color[key]}\n              ></Line>:null\n            ))}\n          </LineChart>\n        </ResponsiveContainer>\n\n        <p></p>\n        <div style = {{display:\"grid\", gridTemplateColumns: \"repeat(4, 1fr)\"}}>\n            <div className={this.state.display[\"総人口\"]==\"\"?\"totalPopulation\":\"noDisplay\"} onClick={this.totalPopulation}>総人口</div>\n            <div className={this.state.display[\"年少人口\"]==\"\"?\"youngPopulation\":\"noDisplay\"} onClick={this.youngPopulation}>年少人口</div>\n            <div className={this.state.display[\"生産年齢人口\"]==\"\"?\"workingAge\":\"noDisplay\"} onClick={this.workingAge}>生産年齢人口</div>\n            <div className={this.state.display[\"老年人口\"]==\"\"?\"oldPopulation\":\"noDisplay\"} onClick={this.oldPopulation}>老年人口</div>\n        </div>\n        <p></p>\n\n        <div className=\"switch\" onClick={this.changeMode}>\n          {this.state.graphMode == 1 ? \"Prefecture\" : \"City\"}\n        </div>\n        <p></p>\n        {this.state.graphMode == 1 ? (\n          <PrefecturePage\n            mode={this.state.graphMode}\n            loadData={this.loadData}\n            createAlert={this.createAlert}\n            currentCode={this.state.currentCode}\n          ></PrefecturePage>\n        ) : (\n          <CityPage\n            loadData={this.loadData}\n            createAlert={this.createAlert}\n            currentCode={this.state.currentCode}\n          ></CityPage>\n        )}\n      </div>\n    );\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}