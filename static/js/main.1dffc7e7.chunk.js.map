{"version":3,"sources":["util/resas_api.js","component/PrefectureBox.js","component/PrefecturePage.js","component/CityBox.js","component/CityList.js","component/CityPage.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","headers","getPrefectures","a","get","result","data","prefCode","cityCode","interceptors","request","use","config","token","localStorage","Auth","Authorization","defaults","common","process","PrefectureBox","props","state","added","color","count","pref","mode","loadData","change_display","bind","show_population","evt","preventDefault","this","onPrefectureSelect","prefName","getPopulationOfPrefecture","then","setState","catch","err","createAlert","currentCode","undefined","toString","startsWith","style","width","borderRadius","align","onClick","className","PropTypes","any","func","Component","PrefecturePage","_isMounted","map","CityBox","getPopulationOfCity","city","code","cityName","CityList","getCities","cities","CityPage","rendered","indexOf","push","selected","id","display","App","changeMode","closeAlert","values","key","i","length","year","value","j","k","label","newMode","graphMode","alert","LineChart","height","margin","top","right","left","bottom","XAxis","dataKey","YAxis","Tooltip","keyList","Line","type","stroke","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1dffc7e7.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst instance = axios.create({\n  headers: {\n        'Content-Type': 'application/json',\n    },\n});\n\ninstance.interceptors.request.use(function (config) {\n    const token = localStorage.Auth;\n    config.headers.Authorization =  token ? `Basic ${token}` : '';\n    return config;\n  });\ninstance.defaults.headers.common = {\n          \"X-API-KEY\": process.env.REACT_APP_API_KEY,\n        };\n\nasync function getPrefectures() {\n\tvar result = await instance.get(\"https://opendata.resas-portal.go.jp/api/v1/prefectures\")\n\treturn result.data.result\n}\n\nasync function getCities(prefCode) {\n\tvar result = await instance.get(\"https://opendata.resas-portal.go.jp/api/v1/cities?prefCode=\" + prefCode)\n\treturn result.data.result\n}\n\nasync function getPopulationOfPrefecture(prefCode) {\n\tvar result = await instance.get(\"https://opendata.resas-portal.go.jp/api/v1/population/composition/perYear?prefCode=\" + prefCode)\n\treturn result.data.result.data\n}\n\nasync function getPopulationOfCity(prefCode, cityCode) {\n\tvar result = await instance.get(\"https://opendata.resas-portal.go.jp/api/v1/population/composition/perYear?prefCode=\" + prefCode + \"&cityCode=\" + cityCode)\n\treturn result.data.result.data\n}\n\nexport {getPrefectures, getCities, getPopulationOfPrefecture, getPopulationOfCity}","import React, {Component} from 'react'\nimport PropTypes from 'prop-types';\nimport {getPopulationOfPrefecture} from '../util/resas_api'\n\nimport '../css/box.css'\n\nexport default class PrefectureBox extends Component {\n\tstatic get propTypes() {\n\t\treturn {\n\t\t\tpref: PropTypes.any,\n\t\t\tmode: PropTypes.any,\n\t\t\tcurrentCode:PropTypes.any,\n\t\t\tloadData : PropTypes.func,\n\t\t\tcreateAlert : PropTypes.func,\n\t\t\tonPrefectureSelect: PropTypes.func\n\t\t};\n\t}\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tadded : false,\n\t\t\tcolor : \"#A8A878\",\n\t\t\tcount : 0\n\t\t}\n\t\tthis.pref = this.props.pref\n\t\tthis.mode = props.mode\n\t\tthis.loadData = props.loadData\n\n\t\tthis.change_display = this.change_display.bind(this)\n\t\tthis.show_population = this.show_population.bind(this)\n\t}\t\n\n\t\n\tchange_display(evt){\n\t\tevt.preventDefault()\n\t\tthis.props.onPrefectureSelect(this.pref.prefCode, this.pref.prefName)\n\t}\n\n\tshow_population(evt) {\n\t\tevt.preventDefault()\n\t\tif(this.state.added == false) {\n\t\t\tgetPopulationOfPrefecture(this.pref.prefCode)\n\t\t\t.then(result => {\n\t\t\t\tthis.props.loadData(result, this.pref.prefCode+\"_\")\n\t\t\t\tthis.setState({added:true})\n\t\t\t})\n\t\t\t.catch(err => this.props.createAlert(err))\n\t\t} else {\n\t\t\tthis.setState({added:false})\n\t\t}\n\t}\n\n\n\trender() {\n\t\tvar currentCode = this.props.currentCode\n\t\tvar color = (currentCode != undefined && currentCode.toString().startsWith(this.pref.prefCode+\"_\"))?\"#4924A1\":\"#A8A878\"\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<table style = {{width:\"100%\",\"color\" : \"white\",\"backgroundColor\": color , borderRadius:\"25px\", \"border\" : \"5px solid #6D6D4E\"}}>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td align = \"center\" onClick = {(this.mode==2)?this.change_display.bind(this):this.show_population.bind(this)} style={{borderRadius:\"25px\"}} className = \"prefBox\">\n\t\t\t\t\t\t\t\t{this.pref.prefName}\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t\t<p></p>\n\t\t\t</div>)\n\t}\n}","import React, {Component} from 'react'\nimport PropTypes from 'prop-types';\nimport PrefectureBox from './PrefectureBox'\nimport {getPrefectures} from '../util/resas_api'\nexport default class PrefecturePage extends Component{\n\tstatic get propTypes() {\n\t\treturn {\n\t\t\tpref: PropTypes.any,\n\t\t\tcurrentCode:PropTypes.any,\n\t\t\tloadData : PropTypes.func,\n\t\t\tcreateAlert : PropTypes.func,\n\t\t\tonPrefectureSelect: PropTypes.func\n\t\t};\n\t}\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\t\"prefecture_list\" : []\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tthis._isMounted = true;\n        getPrefectures()\n        .then(result => {\n            this.setState({\"prefecture_list\" : result})\n        })\n        .catch(err => this.createAlert(err))\n    }\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t{this.state[\"prefecture_list\"].map(pref => (<PrefectureBox key={pref.prefCode+\"_\"+this.props.currentCode} pref = {pref} \n                                                                 loadData = {this.props.loadData}\n                                                                 createAlert = {this.props.createAlert}\n                                                                 currentCode = {this.props.currentCode}></PrefectureBox>))}\n\t\t\t</div>)\n\t}\n}","import React, {Component} from 'react'\nimport {getPopulationOfCity} from '../util/resas_api'\nimport PropTypes from 'prop-types';\nimport '../css/box.css'\n\nexport default class CityBox extends Component {\n\t\n\tstatic get propTypes() {\n\t\treturn {\n\t\t\tcity: PropTypes.any,\n\t\t\tcurrentCode: PropTypes.any,\n\t\t\tloadData : PropTypes.func,\n\t\t\tcreateAlert : PropTypes.func\n\t\t};\n\t}\n\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tadded : false,\n\t\t\tcolor : \"#A8A878\"\n\t\t}\n\t\tthis.show_population = this.show_population.bind(this)\n\t\t\n\t}\t\n\n\tshow_population(evt) {\n\t\tevt.preventDefault()\n\t\tif(this.state.added == false) {\n\t\t\tgetPopulationOfCity(this.props.city.prefCode, this.props.city.cityCode)\n\t\t\t.then(result => {\n\t\t\t\tthis.props.loadData(result, this.props.city.prefCode + \"_\" + this.props.city.cityCode)\n\t\t\t\tthis.setState({added:true})\n\t\t\t})\n\t\t\t.catch(err => this.props.createAlert(err))\n\t\t} else {\n\t\t\tthis.setState({added:false})\n\t\t}\n\t}\n\n\t\n\trender() {\n\t\tvar currentCode = this.props.currentCode\n\t\tvar code = this.props.city.prefCode + \"_\" + this.props.city.cityCode\n\t\tvar color = (currentCode != undefined && currentCode == code)?\"#4924A1\":\"#A8A878\"\n\t\treturn (\n\t\t\t<div style={{borderRadius:\"25px\", \"border\" : \"5px solid #6D6D4E\",\"backgroundColor\" : color, \"color\":\"white\"}} >\n\t\t\t\t<p></p>\n\t\t\t\t<div  onClick = {this.show_population.bind(this)} align=\"center\" className = \"cityBox\">\n\t\t\t\t\t{this.props.city.cityName}\n\t\t\t\t</div>\n\t\t\t\t<p></p>\n\t\t\t</div>\n\t\t\t)\n\t}\n}","import React, {Component} from 'react'\nimport PropTypes from 'prop-types';\nimport {getCities} from '../util/resas_api'\n\nimport CityBox from './CityBox'\n\nimport '../css/cityPage.css'\n\nexport default class CityList extends Component {\n\tstatic get propTypes() {\n\t\treturn {\n\t\t\tprefName: PropTypes.any,\n\t\t\tprefCode: PropTypes.any,\n\t\t\tcurrentCode: PropTypes.any,\n\t\t\tloadData : PropTypes.func,\n\t\t\tcreateAlert : PropTypes.func\n\t\t};\n\t}\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\t\"cities\" : []\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tthis._isMounted = true;\n\t\tgetCities(this.props.prefCode)\n\t\t.then(result => {\n\t\t\tthis.setState({cities:result})\n\t\t\t\n\t\t})\n\t\t.catch(err => this.props.createAlert(err))\n\t}\n\n\n\trender() {\n\t\t\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"header\">\n\t\t\t\t\t{this.props.prefName}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"cityList\">\n\t\t\t\t\t{this.state.cities.map(city => (<CityBox key = {city.prefCode+\"_\"+city.cityCode + \"_\"+this.props.currentCode} city = {city} loadData = {this.props.loadData}\n                                            createAlert = {this.props.createAlert} \n                                            currentCode = {this.props.currentCode}></CityBox>))}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}","import React, {Component} from 'react'\nimport PropTypes from 'prop-types';\nimport {getPrefectures} from '../util/resas_api'\n\nimport PrefectureBox from './PrefectureBox'\nimport CityList from './CityList'\nimport '../css/cityPage.css'\n\nexport default class CityPage extends Component {\n\tstatic get propTypes() {\n\t\treturn {\n\t\t\tcurrentCode: PropTypes.any,\n\t\t\tloadData : PropTypes.func,\n\t\t\tcreateAlert : PropTypes.func\n\t\t};\n\t}\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\t\"prefecture_list\" : [],\n\t\t\t\"rendered\" : [],\n\t\t\t\"selected\" : undefined,\n\t\t\t\"count\" : {},\n\t\t\tprefName:undefined\n\t\t}\n\t\tthis.onPrefectureSelect = this.onPrefectureSelect.bind(this)\n\n\n\t}\n\n\tcomponentDidMount() {\n\t\tthis._isMounted = true;\n\t\tgetPrefectures()\n        .then(result => {\n            this.setState({\"prefecture_list\" : result})\n        })\n        .catch(err => this.createAlert(err))\n\t}\n\n\tonPrefectureSelect (prefCode, prefName) {\n\t\tvar rendered = this.state.rendered\t\t\n\t\tvar count = this.state.count\n\t\tif(rendered.indexOf(prefCode) == -1) {\n\t\t\trendered.push(prefCode)\n\t\t\tcount[prefCode] = 0\n\t\t}\n\t\tthis.setState({rendered:rendered, selected: prefCode, prefName : prefName})\n\t}\n\n\trender() {\n\t\t\n\t\treturn(\n\t\t\t<div id=\"city_page\">\n\t\t\t\t<div id=\"city_page_left\">\n\t\t\t\t\t{this.state[\"prefecture_list\"].map(pref => (<PrefectureBox key={\"2_\"+pref.prefCode} currentCode = {this.props.currentCode} \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpref = {pref} onPrefectureSelect={this.onPrefectureSelect} mode={2}></PrefectureBox> ))}\n\t\t\t\t</div>\n\t\t\t\t<div id=\"city_page_right\">\n\t\t\t\t\t{this.state.rendered.map(prefCode => (\n\t\t\t\t\t\t<div key = {this.state.selected+\"_city_\"+prefCode}  style = {{display:(this.state.selected == prefCode)?\"\":\"none\"}}>\n\t\t\t\t\t\t\t<CityList prefCode = {prefCode} loadData = {this.props.loadData}\n                                            createAlert = {this.props.createAlert}\n                                            currentCode = {this.props.currentCode} prefName={this.state.prefName}></CityList>\n\t\t\t\t\t\t</div>)\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t</div>)\n\t}\n}","\nimport './App.css';\n\nimport {\n  LineChart,\n  XAxis,\n  YAxis,\n  Line,\n  Tooltip\n} from \"recharts\";\n\nimport React, {Component} from 'react'\n\nimport PrefecturePage from './component/PrefecturePage'\nimport CityPage from './component/CityPage'\n\n//Graph mode : 1 - Prefectures, 2 - Cities\n\n\nexport default class App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            \"graphMode\" : 1,\n            \"data\": [],\n            \"keyList\" : [\"総人口\", \"年少人口\", \"生産年齢人口\", \"老年人口\"],\n            \"color\" : {\n                \"総人口\" : \"#6D5E9C\",\n                \"年少人口\" : \"#2C2C2C\",\n                \"生産年齢人口\" : \"#C03028\",\n                \"老年人口\" : \"#4E8234\"\n            },\n            \"currentCode\" : undefined\n        }\n\n        this.loadData = this.loadData.bind(this)\n        this.changeMode = this.changeMode.bind(this)\n        this.createAlert = this.createAlert.bind(this)\n        this.closeAlert = this.closeAlert.bind(this)\n\n    }\n\n    loadData(values, key){\n\n        var data = []\n        for(let i=0;i<values[0].data.length;i++) data.push({year:values[0].data[i].year})\n        for(let i=0;i<values.length;i++) {\n            var value = values[i].data\n            for(let j=0;j<value.length;j++) for(let k=0;k<data.length;k++) if(value[j].year == data[k].year) data[k][values[i].label] = value[j].value\n        }\n        this.setState({data : data, currentCode: key})\n    }\n\n    changeMode (){\n        \n        var newMode = 1;\n        if(this.state.graphMode == 1) {\n            newMode = 2\n        }\n        this.setState({\n            graphMode : newMode,\n            currentCode:undefined\n        })\n    }\n\n    createAlert(alert) {\n        this.setState({alert:alert})\n    }\n\n    closeAlert(){\n        this.setState({alert:undefined})\n    }\n\n    render() {\n        \n        return (\n            <div style = {{\"marginLeft\": \"1em\", \"width\":\"80%\"}}>\n                {this.state.alert==undefined?<div>\n                    \n                </div> : <></>}\n                <LineChart width = {1200} height={600} data={this.state.data} margin={{ top: 30, right: 30, left: 60, bottom: 0 }}> \n                    <XAxis dataKey=\"year\"/>\n                    <YAxis />\n                    <Tooltip />\n                    {this.state.keyList.map(key => (<Line type=\"monotone\" key = {key} dataKey={key} stroke={this.state.color[key]}></Line>))}\n                </LineChart>\n                <p></p>\n                <div className=\"switch\" onClick={this.changeMode}>\n                    {this.state.graphMode == 1? \"Prefecture\": \"City\"}\n                </div>\n                <p></p>\n                {this.state.graphMode == 1?<PrefecturePage mode = {this.state.graphMode} \n                                            loadData = {this.loadData} createAlert = {this.createAlert}\n                                            currentCode = {this.state.currentCode}></PrefecturePage>:\n                                            \n                                            <CityPage loadData = {this.loadData}\n                                            createAlert = {this.createAlert}\n                                            currentCode = {this.state.currentCode}></CityPage>}\n\n            </div>\n        );\n    }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}